### WebServer流程

一个网络服务器，其实最基本的流程就是对于请求的响应，而一个最简单的Web服务只要满足

``
获取到对应请求 -> 解析请求 -> 组装回包 -> 相应请求
``
这一个流程，其实就已经是一个最简单的Web服务

### 1.基于socket api搭建后台

1.1 版本: 用户请求首页返回固定的资源
1.2 版本: 从当前服务器找到对应的静态资源 并且返回
1.3 版本: 使用多进程 多线程支持多访问 

### 改进

这个时候我们就发现，当我们需要请求一些动态资源的时候，就会需要去运行一些python脚本去实现。
而如果这个时候还是在web服务器去写这些代码的时候，就先显得很冗余。
所以需要将web服务端和业务服务端切分开。

也正是如此，我们就需要定义一个规范能够使得，
只要一些框架遵循这个规范就可以让一个web框架在服务器运行起来。

WSGi 就是一个这样的规范，只要对应的app能够接收一个environ 和 tart_response，一个发送HTTP响应的函数。
我们常见的python服务器就是uWSGI, 而Flask就是一个遵循WSGI规范的web框架,所以Flask就可以直接利用uWSGI运行。

